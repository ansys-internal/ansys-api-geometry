// Copyright 2021, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.
syntax = "proto3";
package ansys.api.discovery.v0;
option csharp_namespace = "Ansys.Api.Discovery.V0";


import "google/protobuf/struct.proto";

//
// The type of curve.
enum CurveType {
  CURVETYPE_UNKNOWN = 0;
  CURVETYPE_LINE = 1;
  CURVETYPE_CIRCLE = 2;
  CURVETYPE_ELLIPSE = 3;
  CURVETYPE_NURBS = 4;
  CURVETYPE_PROCEDURAL = 5;
}

//
// The type of surface.
enum SurfaceType {
  SURFACETYPE_UNKNOWN = 0;
  SURFACETYPE_PLANE = 1;
  SURFACETYPE_CYLINDER = 2;
  SURFACETYPE_CONE = 3;
  SURFACETYPE_TORUS = 4;
  SURFACETYPE_SPHERE = 5;
  SURFACETYPE_NURBS = 6;
  SURFACETYPE_PROCEDURAL = 7;
}

//
// The type of dimension.
enum DimensionType {
  DIMENSIONTYPE_UNKNOWN = 0;
  DIMENSIONTYPE_LINEAR = 1;
  DIMENSIONTYPE_DIAMETRIC = 2;
  DIMENSIONTYPE_RADIAL = 3;
  DIMENSIONTYPE_ARC = 4;
  DIMENSIONTYPE_AREA = 5;
  DIMENSIONTYPE_VOLUME = 6;
  DIMENSIONTYPE_MASS = 7;
  DIMENSIONTYPE_ANGULAR = 8;
  DIMENSIONTYPE_COUNT = 9;
  DIMENSIONTYPE_UNITLESS = 10;
}

//
// A design edge.
message DesignEdge{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The curve type.
  // Output only.
  CurveType curve_type = 10;
  // The display name of the owning design body.
  // Output only.
  string owner_display_name = 11;
  // The export identifier.
  // Output only.
  string export_id = 12;
  // The length of the design edge.
  // Output only.
  double length = 13;
}

//
// DesignEdgeView is used to select which fields to return for Get/List.
enum DesignEdgeView {
  // Unspecified.
  DESIGNEDGE_VIEW_UNSPECIFIED = 0;
  // Returns everything.
  DESIGNEDGE_VIEW_FULL = 1;
  // Returns the moniker only.
  DESIGNEDGE_VIEW_MONIKER = 2;
  // Returns basic information.
  DESIGNEDGE_VIEW_BASIC = 3;
}

//
// A design face.
message DesignFace{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The surface type.
  // Output only.
  SurfaceType surface_type = 10;
  // The display name of the owning design body.
  // Output only.
  string owner_display_name = 11;
  // The export identifier.
  // Output only.
  string export_id = 12;
  // The area of the design face.
  // Output only.
  double area = 13;
}

//
// DesignFaceView is used to select which fields to return for Get/List.
enum DesignFaceView {
  DESIGNFACE_VIEW_UNSPECIFIED = 0;
  DESIGNFACE_VIEW_FULL = 1;
  DESIGNFACE_VIEW_MONIKER = 2;
  DESIGNFACE_VIEW_BASIC = 3;
}

//
// A design body.
message DesignBody{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The design body display name.
  string display_name = 2;
  // Indicates whether this design body can be suppressed.
  // Output only.
  bool can_suppress = 3;
  // Indicates whether this design body is deleted.
  // Output only.
  bool is_deleted = 4;
  // Indicates whether this design body is suppressed.
  // Output only.
  bool is_suppressed = 5;
  // The transformation to master space.
  // Output only.
  Matrix transform_to_master = 6;
  // Access to design body master properties.
  // Output only.
  DesignBodyMasterNullable master = 7;
  // This object's master moniker. 
  // Output only.
  string master_moniker=8;
}

//
// A nullable design body master.
message DesignBodyMasterNullable{
  oneof kind {
    // Null if the design body is not a master.
    google.protobuf.NullValue null = 1;
    // Access to design body master properties.
    DesignBodyMaster props = 2;
  }
}

//
// A design body master.
message DesignBodyMaster {
  // The update state.
  // Output only.
  string update_state = 6;
  // The map of text attributes.
  // Output only.
  map< string, string > text_attributes = 7;
  // The nmp of number attributes.
  // Output only.
  map< string, double > number_attributes = 8;
  // The solid material.
  // Output only.
  Material material = 9;
  // The surface material.
  // Output only.
  Material surface_material = 10 ;
  // The shape information
  // Output only.
  Shape shape = 11;
  //
  // The material.
  message Material {
    // The material display name.
    // Output only.
    string display_name=1;
  }
  //
  // The shape.
  message Shape {
    // Indicates if this is a surface body.
    // Output only.
    bool is_surface_body = 1;
    // The surface area.
    // Output only.
    double surface_area = 2;
    // The volume.
    // Output only.
    double volume = 3;
    // The bounding box size.
    // Output only.
    Direction bounding_box_size = 4;
  }
}

//
// DesignBodyView is used to select which fields to return for Get/List.
enum DesignBodyView {
  DESIGNBODY_VIEW_UNSPECIFIED = 0;
  DESIGNBODY_VIEW_FULL = 1;
  DESIGNBODY_VIEW_MONIKER = 2;
  DESIGNBODY_VIEW_BASIC = 3;
}

//
// A component.
message Component{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2;
  // The part occurrence for this component.
  // Output only.
  Part part_occurrence = 3;
  // The placement matrix.
  // Output only.
  Matrix placement =4;
}

//
// ComponentView is used to select which fields to return for Get/List.
enum ComponentView {
  COMPONENT_VIEW_UNSPECIFIED = 0;
  COMPONENT_VIEW_FULL = 1;
  COMPONENT_VIEW_MONIKER = 2;
  COMPONENT_VIEW_BASIC = 3;
}

//
// A part.
message Part{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2;
}

//
// PartView is used to select which fields to return for Get/List.
enum PartView {
  PART_VIEW_UNSPECIFIED = 0;
  PART_VIEW_FULL = 1;
  PART_VIEW_MONIKER = 2;
  PART_VIEW_BASIC = 3;
}

//
// A named selection.
message NamedSelection {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2;
}

//
// NamedSelectionView is used to select which fields to return for Get/List.
enum NamedSelectionView {
  NAMEDSELECTION_VIEW_UNSPECIFIED = 0;
  NAMEDSELECTION_VIEW_FULL = 1;
  NAMEDSELECTION_VIEW_MONIKER = 2;
  NAMEDSELECTION_VIEW_BASIC = 3;
}

//
// A driving dimension.
message DrivingDimension {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2;
  // The type of driving dimension.
  // Output only.
  DimensionType dimension_type = 3;
  // The value of the driving dimension.
  double dimension_value = 4;
}

//
// DrivingDimensionView is used to select which fields to return for Get/List.
enum DrivingDimensionView {
  DRIVINGDIMENSION_VIEW_UNSPECIFIED = 0;
  DRIVINGDIMENSION_VIEW_FULL = 1;
  DRIVINGDIMENSION_VIEW_MONIKER = 2;
  DRIVINGDIMENSION_VIEW_BASIC = 3;
}

//
// A design document.
message Document{
  string moniker = 1;
  bool is_complete=2;
  bool is_locked=3;
  bool is_modified=4;
  bool is_removed = 5;
  Part main_part=6;
  bool main_part_displays_file_name=7;
  string path = 10;
}

//
// DocumentView is used to select which fields to return for Get/List.
enum DocumentView {
  DOCUMENT_VIEW_UNSPECIFIED = 0;
  DOCUMENT_VIEW_FULL = 1;
  DOCUMENT_VIEW_MONIKER = 2;
  DOCUMENT_VIEW_BASIC = 3;
}

//
// A 3D coordinate system.
message CoordinateSystem{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 10;
  // The display name.
  Frame frame = 11;
}

//
// CoordinateSystemView is used to select which fields to return for Get/List.
enum CoordinateSystemView {
  COORDINATESYSTEM_VIEW_UNSPECIFIED = 0;
  COORDINATESYSTEM_VIEW_FULL = 1;
  COORDINATESYSTEM_VIEW_MONIKER = 2;
  COORDINATESYSTEM_VIEW_BASIC = 3;
}

//
// A 3D point.
message Point {
  double x = 1;
  double y = 2;
  double z = 3;
}

//
// A 3D direction.
message Direction {
  double x = 1;
  double y = 2;
  double z = 3;
}

//
// A 3D coordinate frame.
message Frame {
    Point origin = 1;
    Direction dir_x = 2;
    Direction dir_y = 3;
}

//
// A Plane
message Plane {
  Frame frame = 1;
}

//
// A 3D box.
message Box {
    Point min = 1;
    Point max = 2;
}

//
// Tesselation
message Tesselation {
    repeated double vertices = 1;
    repeated int32 faces = 2;
    int32 facecolor = 3; // ARGB
}

//
// A homogeneous 3D transformation matrix.
// The matrix is a pre-multiplication transformation. 
// The rotation is in m00->m22 and contains no scaling in its leading diagonal.
// The translation is m03/m33, m13/m33, m23/m33.
// The uniform scale is 1/m33.
message Matrix{
    double m00 = 1;
    double m01 = 2;
    double m02 = 3;
    double m03 = 4;
    double m10 = 5;
    double m11 = 6;
    double m12 = 7;
    double m13 = 8;
    double m20 = 9;
    double m21 = 10;
    double m22 = 11;
    double m23 = 12;
    double m30 = 13;
    double m31 = 14;
    double m32 = 15;
    double m33 = 16;
}

// A 3D line.
message Line {
    Point start=1;
    Point end=2;
}

// A 3D Circle.
message Circle {
    Point center=1;
    double radius=2;
}

// A 3D Arc
message Arc {
    Point center=1;
    Point start=2;
    Point end=3;
    Direction axis=4;
}

// A 3D Ellipse.
message Ellipse {
    Point center=1;
    double majorradius=2;
    double minorradius=3;
}

// A 3D Polygon.
message Polygon {
    Point center=1;
    double radius=2;
    int32 numberofsides=3;
}

// Collection of primitive geometries
message Geometries {
    repeated Point points = 1;
    repeated Line lines = 2;
    repeated Arc arcs = 3;
    repeated Circle circles = 4;
    repeated Ellipse ellipses = 5;
    repeated Polygon polygons = 6;
}
